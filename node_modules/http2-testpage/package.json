{
  "name": "http2-testpage",
  "version": "0.2.0",
  "description": "A test server for testing client side HTTP/2 implementations",
  "bin": {
    "http2-testpage": "./bin/http2-testpage.js"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "dependencies": {
    "bunyan": "*",
    "commander": "*",
    "http2": ">=1.0.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/molnarg/http2-testpage.git"
  },
  "homepage": "https://github.com/molnarg/http2-testpage",
  "bugs": {
    "url": "https://github.com/molnarg/http2-testpage/issues"
  },
  "keywords": [
    "http2",
    "server",
    "test"
  ],
  "author": {
    "name": "Gábor Molnár",
    "email": "gabor@molnar.es",
    "url": "http://gabor.molnar.es"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "readme": "HTTP2 testpage\n==============\n\nThis project aims to provide a server that can be used to test client side HTTP/2 implementations.\n\nOne of the most important aspects is handling protocol errors, since it's something that's usually\nhard to test without custom server side software.\n\nThe test server is written in JavaScript for [node.js](http://nodejs.org/) using the\n[node-http2](https://github.com/molnarg/node-http2) HTTP/2 library.\n\nSupported client software\n-------------------------\n\nThe goal is to be accessible to as many different clients as possible. Currently, you will need a\nclient software with the following capabilities:\n\n* ability to follow redirects (307 Temporary Redirect)\n\nThis list will probably gain more items in the future. For example, tests will need a way to tell\nclient software what to do next. The simplest solution is to send HTML code that contains links to\nimages or iframes. This will require the client to be able to parse HTML and initiate requests for\nsubresources.\n\nThe only supported version of the standard is the\n[draft-ietf-httpbis-http2-06](http://tools.ietf.org/html/draft-ietf-httpbis-http2-06) draft.\n\nHow to use\n----------\n\nYou will need at least node version 0.10.0. Install http2-testpage using npm (the node package\nmanager):\n\n```bash\n$ npm install -g http2-testpage\n```\n\nUse the `http2-testpage` executable:\n\n```bash\n$ http2-testpage -h\n\n  Usage: http2-testpage [options]\n\n  Options:\n\n    -h, --help         output usage information\n    -V, --version      output the version number\n    -l, --log [level]  Logging level [info]\n    -k, --key [path]   Private key to use [http2-testpage/keys/localhost.key]\n    -c, --crt [path]   Certificate to use [http2-testpage/keys/localhost.crt]\n    -p, --port [port]  Port to listen on [8080]\n\n```\n\nPoint your client software to the `https://localhost:8080/testname` URL, where `testname` is one of\nthe directory names in the `test` directory. It will create a server on a dedicated port and\nredirect the client to that port using a 307 Temporary Redirect.\n",
  "_id": "http2-testpage@0.2.0",
  "dist": {
    "shasum": "10b8691427d22634442bf7f93a16e1fa2a15154c",
    "tarball": "http://registry.npmjs.org/http2-testpage/-/http2-testpage-0.2.0.tgz"
  },
  "_from": "http2-testpage@*",
  "_npmVersion": "1.3.8",
  "_npmUser": {
    "name": "molnarg",
    "email": "gabor.molnar@sch.bme.hu"
  },
  "maintainers": [
    {
      "name": "molnarg",
      "email": "gabor.molnar@sch.bme.hu"
    }
  ],
  "directories": {},
  "_shasum": "10b8691427d22634442bf7f93a16e1fa2a15154c",
  "_resolved": "https://registry.npmjs.org/http2-testpage/-/http2-testpage-0.2.0.tgz"
}
